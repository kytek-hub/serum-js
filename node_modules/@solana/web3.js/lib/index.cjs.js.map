{"version":3,"file":"index.cjs.js","sources":["../src/util/to-buffer.js","../src/publickey.js","../src/account.js","../src/bpf-loader-deprecated.js","../src/timing.js","../src/layout.js","../src/util/shortvec-encoding.js","../src/message.js","../src/transaction.js","../src/sysvar.js","../src/fee-calculator.js","../src/nonce-account.js","../src/util/sleep.js","../src/connection.js","../src/util/send-and-confirm-transaction.js","../src/instruction.js","../src/system-program.js","../src/loader.js","../src/bpf-loader.js","../src/stake-program.js","../src/validator-info.js","../src/vote-account.js","../src/util/send-and-confirm-raw-transaction.js","../src/util/cluster.js","../src/index.js"],"sourcesContent":["// @flow\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\n//$FlowFixMe\nlet naclLowLevel = nacl.lowlevel;\n\ntype PublicKeyNonce = [PublicKey, number]; // This type exists to workaround an esdoc parse error\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n      if (decoded.length != 32) {\n        throw new Error(`Invalid public key input`);\n      }\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      buffer = Buffer.concat([buffer, Buffer.from(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(null, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKeyNonce> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n}\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0,\n  0x4a0e,\n  0x1b27,\n  0xc4ee,\n  0xe478,\n  0xad2f,\n  0x1806,\n  0x2f43,\n  0xd7a7,\n  0x3dfb,\n  0x0099,\n  0x2b4d,\n  0xdf0b,\n  0x4fc1,\n  0x2480,\n  0x2b83,\n]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\nimport {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @ignore\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @ignore\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: Object, fields: Object): number {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport bs58 from 'bs58';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\n\n/**\n * The message header, identifying signed and read-only account\n *\n * @typedef {Object} MessageHeader\n * @property {number} numRequiredSignatures The number of signatures required for this message to be considered valid\n * @property {number} numReadonlySignedAccounts: The last `numReadonlySignedAccounts` of the signed keys are read-only accounts\n * @property {number} numReadonlyUnsignedAccounts The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts\n */\nexport type MessageHeader = {\n  numRequiredSignatures: number,\n  numReadonlySignedAccounts: number,\n  numReadonlyUnsignedAccounts: number,\n};\n\n/**\n * An instruction to execute by a program\n *\n * @typedef {Object} CompiledInstruction\n * @property {number} programIdIndex Index into the transaction keys array indicating the program account that executes this instruction\n * @property {number[]} accounts Ordered indices into the transaction keys array indicating which accounts to pass to the program\n * @property {string} data The program input data encoded as base 58\n */\nexport type CompiledInstruction = {\n  programIdIndex: number,\n  accounts: number[],\n  data: string,\n};\n\n/**\n * Message constructor arguments\n *\n * @typedef {Object} MessageArgs\n * @property {MessageHeader} header The message header, identifying signed and read-only `accountKeys`\n * @property {string[]} accounts All the account keys used by this transaction\n * @property {Blockhash} recentBlockhash The hash of a recent ledger block\n * @property {CompiledInstruction[]} instructions Instructions that will be executed in sequence and committed in one atomic transaction if all succeed.\n */\ntype MessageArgs = {\n  header: MessageHeader,\n  accountKeys: string[],\n  recentBlockhash: Blockhash,\n  instructions: CompiledInstruction[],\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => key.toBuffer()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIdIndex = byteArray.shift();\n      const accountCount = shortvec.decodeLength(byteArray);\n      instruction.accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = byteArray.slice(0, dataLength);\n      instruction.data = bs58.encode(Buffer.from(data));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport type {CompiledInstruction} from './message';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n *\n * @typedef {Object} AccountMeta\n * @property {PublicKey} pubkey An account's public key\n * @property {boolean} isSigner True if an instruction requires a transaction signature matching `pubkey`\n * @property {boolean} isWritable True if the `pubkey` can be loaded as a read-write account.\n */\nexport type AccountMeta = {\n  pubkey: PublicKey,\n  isSigner: boolean,\n  isWritable: boolean,\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {|\n  keys?: Array<AccountMeta>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property {?Blockhash} recentBlockhash A recent blockhash\n * @property {?Array<SignaturePubkeyPair>} signatures One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  nonceInfo?: NonceInformation | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * NonceInformation to be used to build a Transaction.\n *\n * @typedef {Object} NonceInformation\n * @property {Blockhash} nonce The current Nonce blockhash\n * @property {TransactionInstruction} nonceInstruction AdvanceNonceAccount Instruction\n */\ntype NonceInformation = {|\n  nonce: Blockhash,\n  nonceInstruction: TransactionInstruction,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id.  Must be populated by the caller\n   */\n  recentBlockhash: Blockhash | null;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo: NonceInformation | null;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push(accountMeta);\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Prefix accountMetas with feePayer here whenever that gets implemented\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    this.signatures.forEach(signature => {\n      const sigPubkeyString = signature.publicKey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === sigPubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isSigner = true;\n      } else {\n        uniqueMetas.unshift({\n          pubkey: new PublicKey(sigPubkeyString),\n          isSigner: true,\n          isWritable: true,\n        });\n      }\n    });\n\n    // Split out signing from nonsigning keys and count readonlys\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        // Promote the first signer to writable as it is the fee payer\n        const first = signedKeys.length === 0;\n        signedKeys.push(pubkey.toString());\n        if (!first && !isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    // Initialize signature array, if needed\n    if (this.signatures.length === 0) {\n      const signatures: Array<SignaturePubkeyPair> = [];\n      signedKeys.forEach(pubkey => {\n        signatures.push({signature: null, publicKey: new PublicKey(pubkey)});\n      });\n      this.signatures = signatures;\n    }\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(keyObj =>\n            accountKeys.indexOf(keyObj.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures: this.signatures.length,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this.compileMessage().serialize();\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts.  Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used when testing for Transaction confirmation.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    this.signPartial(...signers);\n  }\n\n  /**\n   * Partially sign a Transaction with the specified accounts.  The `Account`\n   * inputs will be used to sign the Transaction immediately, while any\n   * `PublicKey` inputs will be referenced in the signed Transaction but need to\n   * be filled in later by calling `addSigner()` with the matching `Account`.\n   *\n   * All the caveats from the `sign` method apply to `signPartial`\n   */\n  signPartial(...partialSigners: Array<PublicKey | Account>) {\n    if (partialSigners.length === 0) {\n      throw new Error('No signers');\n    }\n\n    function partialSignerPublicKey(accountOrPublicKey: any): PublicKey {\n      if ('publicKey' in accountOrPublicKey) {\n        return accountOrPublicKey.publicKey;\n      }\n      return accountOrPublicKey;\n    }\n\n    function signerAccount(accountOrPublicKey: any): ?Account {\n      if (\n        'publicKey' in accountOrPublicKey &&\n        'secretKey' in accountOrPublicKey\n      ) {\n        return accountOrPublicKey;\n      }\n    }\n\n    const signatures: Array<SignaturePubkeyPair> = partialSigners.map(\n      accountOrPublicKey => ({\n        signature: null,\n        publicKey: partialSignerPublicKey(accountOrPublicKey),\n      }),\n    );\n    this.signatures = signatures;\n    const signData = this.serializeMessage();\n\n    partialSigners.forEach((accountOrPublicKey, index) => {\n      const account = signerAccount(accountOrPublicKey);\n      if (account) {\n        const signature = nacl.sign.detached(signData, account.secretKey);\n        invariant(signature.length === 64);\n        signatures[index].signature = Buffer.from(signature);\n      }\n    });\n  }\n\n  /**\n   * Fill in a signature for a partially signed Transaction.  The `signer` must\n   * be the corresponding `Account` for a `PublicKey` that was previously provided to\n   * `signPartial`\n   */\n  addSigner(signer: Account) {\n    const signData = this.serializeMessage();\n    const signature = nacl.sign.detached(signData, signer.secretKey);\n    this.addSignature(signer.publicKey, signature);\n  }\n\n  /**\n   * Add an externally created signature to a transaction\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`Unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage());\n  }\n\n  /**\n   * @private\n   */\n  _verifySignatures(signData: Buffer): boolean {\n    let verified = true;\n    for (const {signature, publicKey} of this.signatures) {\n      if (\n        !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n      ) {\n        verified = false;\n      }\n    }\n    return verified;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * The Transaction must have a valid `signature` before invoking this method\n   */\n  serialize(): Buffer {\n    const {signatures} = this;\n    if (!signatures || signatures.length === 0) {\n      throw new Error('Transaction has not been signed');\n    }\n\n    const signData = this.serializeMessage();\n    if (!this._verifySignatures(signData)) {\n      throw new Error('Transaction has not been signed correctly');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @private\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","// @flow\nimport {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @private\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n */\nexport type FeeCalculator = {\n  lamportsPerSignature: number,\n};\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @private\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    nonceAccount.authorizedPubkey = new PublicKey(\n      nonceAccount.authorizedPubkey,\n    );\n    nonceAccount.nonce = new PublicKey(nonceAccount.nonce).toString();\n    return nonceAccount;\n  }\n}\n","// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nimport assert from 'assert';\nimport bs58 from 'bs58';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\n\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype TokenAccountsFilter =\n  | {|\n      mint: PublicKey,\n    |}\n  | {|\n      programId: PublicKey,\n    |};\n\n/**\n * Extra contextual information for RPC responses\n *\n * @typedef {Object} Context\n * @property {number} slot\n */\ntype Context = {\n  slot: number,\n};\n\n/**\n * Options for sending transactions\n *\n * @typedef {Object} SendOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n */\nexport type SendOptions = {\n  skipPreflight?: boolean,\n};\n\n/**\n * Options for confirming transactions\n *\n * @typedef {Object} ConfirmOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {number | undefined} confirmations desired number of cluster confirmations\n */\nexport type ConfirmOptions = {\n  skipPreflight?: boolean,\n  confirmations?: number,\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n *\n * @typedef {Object} ConfirmedSignaturesForAddress2Options\n * @property {TransactionSignature | undefined} before start searching backwards from this transaction signature.\n *               If not provided the search starts from the highest max confirmed block.\n * @property {number | undefined} limit maximum transaction signatures to return (between 1 and 1,000, default: 1,000).\n *\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  before?: TransactionSignature,\n  limit?: number,\n};\n\n/**\n * RPC Response with extra contextual information\n *\n * @typedef {Object} RpcResponseAndContext\n * @property {Context} context\n * @property {T} value response\n */\ntype RpcResponseAndContext<T> = {\n  context: Context,\n  value: T,\n};\n\n/**\n * @private\n */\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nfunction notificationResultAndContext(resultDescription: any) {\n  return struct({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'max':    Query the most recent block which has been finalized by the cluster\n *   'recent': Query the most recent block which has reached 1 confirmation by the connected node\n *   'root':   Query the most recent block which has been rooted by the connected node\n *   'single': Query the most recent block which has reached 1 confirmation by the cluster\n *   'singleGossip': Query the most recent block which has reached 1 confirmation according to votes seen in gossip\n * </pre>\n *\n * @typedef {'max' | 'recent' | 'root' | 'single' | 'singleGossip'} Commitment\n */\nexport type Commitment = 'max' | 'recent' | 'root' | 'single' | 'singleGossip';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n *\n * @typedef {'circulating' | 'nonCirculating'} LargestAccountsFilter\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n *\n * @typedef {Object} GetLargestAccountsConfig\n * @property {Commitment|undefined} commitment The level of commitment desired\n * @property {LargestAccountsFilter|undefined} filter Filter largest accounts by whether they are part of the circulating supply\n */\ntype GetLargestAccountsConfig = {\n  commitment: ?Commitment,\n  filter: ?LargestAccountsFilter,\n};\n\n/**\n * Configuration object for changing query behavior\n *\n * @typedef {Object} SignatureStatusConfig\n * @property {boolean} searchTransactionHistory enable searching status history, not needed for recent transactions\n */\nexport type SignatureStatusConfig = {\n  searchTransactionHistory: boolean,\n};\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string|null} gossip Gossip network address for the node\n * @property {string|null} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n * @property {string|null} version Software version of the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string | null,\n  tpu: string | null,\n  rpc: string | null,\n  version: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  activatedStake: number,\n  epochVoteAccount: boolean,\n  epochCredits: Array<[number, number, number]>,\n  commission: number,\n  lastVote: number,\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\ntype VoteAccountStatus = {\n  current: Array<VoteAccountInfo>,\n  delinquent: Array<VoteAccountInfo>,\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n *\n * @typedef {Object} InflationGovernor\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} taper\n * @property {number} terminal\n */\ntype InflationGovernor = {\n  foundation: number,\n  foundationTerm: number,\n  initial: number,\n  taper: number,\n  terminal: number,\n};\n\nconst GetInflationGovernorResult = struct({\n  foundation: 'number',\n  foundationTerm: 'number',\n  initial: 'number',\n  taper: 'number',\n  terminal: 'number',\n});\n\n/**\n * Information about the current epoch\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n * @property {number} blockHeight\n */\ntype EpochInfo = {\n  epoch: number,\n  slotIndex: number,\n  slotsInEpoch: number,\n  absoluteSlot: number,\n  blockHeight: number | null,\n};\n\nconst GetEpochInfoResult = struct({\n  epoch: 'number',\n  slotIndex: 'number',\n  slotsInEpoch: 'number',\n  absoluteSlot: 'number',\n  blockHeight: 'number?',\n});\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slotsPerEpoch The maximum number of slots in each epoch\n * @property {number} leaderScheduleSlotOffset The number of slots before beginning of an epoch to calculate a leader schedule for that epoch\n * @property {boolean} warmup Indicates whether epochs start short and grow\n * @property {number} firstNormalEpoch The first epoch with `slotsPerEpoch` slots\n * @property {number} firstNormalSlot The first slot of `firstNormalEpoch`\n */\ntype EpochSchedule = {\n  slotsPerEpoch: number,\n  leaderScheduleSlotOffset: number,\n  warmup: boolean,\n  firstNormalEpoch: number,\n  firstNormalSlot: number,\n};\n\nconst GetEpochScheduleResult = struct({\n  slotsPerEpoch: 'number',\n  leaderScheduleSlotOffset: 'number',\n  warmup: 'boolean',\n  firstNormalEpoch: 'number',\n  firstNormalSlot: 'number',\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n *\n * @typedef {Object} LeaderSchedule\n */\ntype LeaderSchedule = {\n  [address: string]: number[],\n};\n\nconst GetLeaderScheduleResult = struct.record([\n  'string',\n  'any', // validating struct.array(['number']) is extremely slow\n]);\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = struct.union(['null', 'object']);\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = struct({err: TransactionErrorResult});\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst Version = struct({\n  'solana-core': 'string',\n});\n\ntype SimulatedTransactionResponse = {\n  err: TransactionError | string | null,\n  logs: Array<string> | null,\n};\n\nconst SimulatedTransactionResponseValidator = jsonRpcResultAndContext(\n  struct.pick({\n    err: struct.union(['null', 'object', 'string']),\n    logs: struct.union(['null', struct.array(['string'])]),\n  }),\n);\n\n/**\n * Metadata for a confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ConfirmedTransactionMeta = {\n  fee: number,\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {Transaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n */\ntype ConfirmedTransaction = {\n  slot: number,\n  transaction: Transaction,\n  meta: ConfirmedTransactionMeta | null,\n};\n\n/**\n * A partially decoded transaction instruction\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {PublicKey} accounts Indicates if the account signed the transaction\n * @property {string} data Raw base-58 instruction data\n */\ntype PartiallyDecodedInstruction = {|\n  programId: PublicKey,\n  accounts: Array<PublicKey>,\n  data: string,\n|};\n\n/**\n * A parsed transaction message account\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {boolean} signer Indicates if the account signed the transaction\n * @property {boolean} writable Indicates if the account is writable for this transaction\n */\ntype ParsedMessageAccount = {\n  pubkey: PublicKey,\n  signer: boolean,\n  writable: boolean,\n};\n\n/**\n * A parsed transaction instruction\n *\n * @typedef {Object} ParsedInstruction\n * @property {string} program Name of the program for this instruction\n * @property {PublicKey} programId ID of the program for this instruction\n * @property {any} parsed Parsed instruction info\n */\ntype ParsedInstruction = {|\n  program: string,\n  programId: PublicKey,\n  parsed: any,\n|};\n\n/**\n * A parsed transaction message\n *\n * @typedef {Object} ParsedMessage\n * @property {Array<ParsedMessageAccount>} accountKeys Accounts used in the instructions\n * @property {Array<ParsedInstruction | PartiallyDecodedInstruction>} instructions The atomically executed instructions for the transaction\n * @property {string} recentBlockhash Recent blockhash\n */\ntype ParsedMessage = {\n  accountKeys: ParsedMessageAccount[],\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n  recentBlockhash: string,\n};\n\n/**\n * A parsed transaction\n *\n * @typedef {Object} ParsedTransaction\n * @property {Array<string>} signatures Signatures for the transaction\n * @property {ParsedMessage} message Message of the transaction\n */\ntype ParsedTransaction = {\n  signatures: Array<string>,\n  message: ParsedMessage,\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {ParsedTransaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n */\ntype ParsedConfirmedTransaction = {\n  slot: number,\n  transaction: ParsedTransaction,\n  meta: ConfirmedTransactionMeta | null,\n};\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<object>} transactions Vector of transactions and status metas\n * @property {Array<object>} rewards Vector of block rewards\n */\ntype ConfirmedBlock = {\n  blockhash: Blockhash,\n  previousBlockhash: Blockhash,\n  parentSlot: number,\n  transactions: Array<{\n    transaction: Transaction,\n    meta: ConfirmedTransactionMeta | null,\n  }>,\n  rewards: Array<{\n    pubkey: string,\n    lamports: number,\n  }>,\n};\n\nfunction createRpcRequest(url): RpcRequest {\n  const server = jayson(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res = {};\n      let waitTime = 500;\n      for (;;) {\n        res = await fetch(url, options);\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetInflationGovernorResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochScheduleResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceAndContextRpcResult = jsonRpcResultAndContext('number?');\n\n/**\n * Expected JSON RPC response for the \"getBlockTime\" message\n */\nconst GetBlockTimeRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: struct.union(['null', 'number', 'undefined']),\n});\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number',\n});\n\n/**\n * Supply\n *\n * @typedef {Object} Supply\n * @property {number} total Total supply in lamports\n * @property {number} circulating Circulating supply in lamports\n * @property {number} nonCirculating Non-circulating supply in lamports\n * @property {Array<PublicKey>} nonCirculatingAccounts List of non-circulating account addresses\n */\ntype Supply = {\n  total: number,\n  circulating: number,\n  nonCirculating: number,\n  nonCirculatingAccounts: Array<PublicKey>,\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  struct({\n    total: 'number',\n    circulating: 'number',\n    nonCirculating: 'number',\n    nonCirculatingAccounts: struct.array(['string']),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n *\n * @typedef {Object} TokenAmount\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAmount = {\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = struct.object({\n  amount: 'string',\n  uiAmount: 'number',\n  decimals: 'number',\n});\n\n/**\n * Token address and balance.\n *\n * @typedef {Object} TokenAccountBalancePair\n * @property {PublicKey} address Address of the token account\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAccountBalancePair = {\n  address: PublicKey,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.pick({\n      address: 'string',\n      amount: 'string',\n      uiAmount: 'number',\n      decimals: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountBalance\" message\n */\nconst GetTokenAccountBalance = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenSupply\" message\n */\nconst GetTokenSupplyRpcResult = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: ['string', struct.literal('base64')],\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: struct.pick({\n          program: 'string',\n          parsed: 'any',\n          space: 'number',\n        }),\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Pair of an account address and its balance\n *\n * @typedef {Object} AccountBalancePair\n * @property {PublicKey} address\n * @property {number} lamports\n */\ntype AccountBalancePair = {\n  address: PublicKey,\n  lamports: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct({\n      lamports: 'number',\n      address: 'string',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVersion\" message\n */\nconst GetVersionRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: Version,\n});\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst ParsedAccountInfoResult = struct.object({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: struct.union([\n    ['string', struct.literal('base64')],\n    struct.pick({\n      program: 'string',\n      parsed: 'any',\n      space: 'number',\n    }),\n  ]),\n  rentEpoch: 'number?',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoAndContextRpcResult = jsonRpcResultAndContext(\n  struct.union(['null', AccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message with jsonParsed param\n */\nconst GetParsedAccountInfoResult = jsonRpcResultAndContext(\n  struct.union(['null', ParsedAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message\n */\nconst GetConfirmedSignaturesForAddressRpcResult = jsonRpcResult(\n  struct.array(['string']),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  struct.array([\n    struct({\n      signature: 'string',\n      slot: 'number',\n      err: TransactionErrorResult,\n      memo: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: AccountInfoResult,\n});\n\n/**\n * @private\n */\nconst ParsedProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: ParsedAccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @private\n */\nconst SlotInfoResult = struct({\n  parent: 'number',\n  slot: 'number',\n  root: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = struct({\n  subscription: 'number',\n  result: SlotInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(SignatureStatusResult),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = struct({\n  subscription: 'number',\n  result: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetParsedProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ParsedProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getSlot\" message\n */\nconst GetSlot = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\nconst GetSlotLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      pubkey: 'string',\n      gossip: struct.union(['null', 'string']),\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n      version: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  struct({\n    current: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n    delinquent: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.union([\n      'null',\n      struct.pick({\n        slot: 'number',\n        confirmations: struct.union(['number', 'null']),\n        err: TransactionErrorResult,\n      }),\n    ]),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult('number');\n\n/**\n * @private\n */\nconst ConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array(['string']),\n    header: struct({\n      numRequiredSignatures: 'number',\n      numReadonlySignedAccounts: 'number',\n      numReadonlyUnsignedAccounts: 'number',\n    }),\n    instructions: struct.array([\n      struct({\n        accounts: struct.array(['number']),\n        data: 'string',\n        programIdIndex: 'number',\n      }),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ParsedConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array([\n      struct({\n        pubkey: 'string',\n        signer: 'boolean',\n        writable: 'boolean',\n      }),\n    ]),\n    instructions: struct.array([\n      struct.union([\n        struct({\n          accounts: struct.array(['string']),\n          data: 'string',\n          programId: 'string',\n        }),\n        struct({\n          parsed: 'any',\n          program: 'string',\n          programId: 'string',\n        }),\n      ]),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      blockhash: 'string',\n      previousBlockhash: 'string',\n      parentSlot: 'number',\n      transactions: struct.array([\n        struct({\n          transaction: ConfirmedTransactionResult,\n          meta: ConfirmedTransactionMetaResult,\n        }),\n      ]),\n      rewards: struct.union([\n        'undefined',\n        struct.array([\n          struct({\n            pubkey: 'string',\n            lamports: 'number',\n          }),\n        ]),\n      ]),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ConfirmedTransactionResult,\n      meta: ConfirmedTransactionMetaResult,\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ParsedConfirmedTransactionResult,\n      meta: ConfirmedTransactionMetaResult,\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  struct({\n    blockhash: 'string',\n    feeCalculator: struct({\n      lamportsPerSignature: 'number',\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  struct.union([\n    'null',\n    struct({\n      feeCalculator: struct({\n        lamportsPerSignature: 'number',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information about the latest slot being processed by a node\n *\n * @typedef {Object} SlotInfo\n * @property {number} slot Currently processing slot\n * @property {number} parent Parent of the current slot\n * @property {number} root The root block of the current slot's fork\n */\ntype SlotInfo = {\n  slot: number,\n  parent: number,\n  root: number,\n};\n\n/**\n * Parsed account data\n *\n * @typedef {Object} ParsedAccountData\n * @property {string} program Name of the program that owns this account\n * @property {any} parsed Parsed account data\n * @property {number} space Space used by account data\n */\ntype ParsedAccountData = {\n  program: string,\n  parsed: any,\n  space: number,\n};\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {T} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo<T> = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: T,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo<Buffer>} accountInfo\n */\ntype KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @private\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature, // TransactionSignature as a base 58 string\n  callback: SignatureResultCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @private\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Signature result\n *\n * @typedef {Object} SignatureResult\n */\nexport type SignatureResult = {|\n  err: TransactionError | null,\n|};\n\n/**\n * Transaction error\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {};\n\n/**\n * Signature status\n *\n * @typedef {Object} SignatureStatus\n * @property {number} slot when the transaction was processed\n * @property {number | null} confirmations the number of blocks that have been confirmed and voted on in the fork containing `slot` (TODO)\n * @property {TransactionError | null} err error, if any\n */\nexport type SignatureStatus = {\n  slot: number,\n  confirmations: number | null,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed signature with its status\n *\n * @typedef {Object} ConfirmedSignatureInfo\n * @property {string} signature the transaction signature\n * @property {number} slot when the transaction was processed\n * @property {TransactionError | null} err error, if any\n * @property {string | null} memo memo associated with the transaction, if any\n */\nexport type ConfirmedSignatureInfo = {\n  signature: string,\n  slot: number,\n  err: TransactionError | null,\n  memo: string | null,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketHeartbeat: IntervalID | null = null;\n\n  _commitment: ?Commitment;\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    lastFetch: Date,\n    simulatedSignatures: Array<string>,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _pollingBlockhash: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n  _slotSubscriptions: {\n    [number]: SlotSubscriptionInfo,\n  } = {};\n  _slotSubscriptionCounter: number = 0;\n  _signatureSubscriptions: {\n    [number]: SignatureSubscriptionInfo,\n  } = {};\n  _signatureSubscriptionCounter: number = 0;\n  _rootSubscriptions: {\n    [number]: RootSubscriptionInfo,\n  } = {};\n  _rootSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment: ?Commitment) {\n    let url = urlParse(endpoint);\n\n    this._rpcRequest = createRpcRequest(url.href);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: new Date(0),\n      transactionSignatures: [],\n      simulatedSignatures: [],\n    };\n\n    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    url.host = '';\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): ?Commitment {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = GetBalanceAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = GetBlockTimeRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = GetSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value.nonCirculatingAccounts = res.result.value.nonCirculatingAccounts.map(\n      account => new PublicKey(account),\n    );\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = GetTokenSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = GetTokenAccountBalance(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => {\n        assert(result.account.data[1] === 'base64');\n        return {\n          pubkey: new PublicKey(result.pubkey),\n          account: {\n            executable: result.account.executable,\n            owner: new PublicKey(result.account.owner),\n            lamports: result.account.lamports,\n            data: Buffer.from(result.account.data[0], 'base64'),\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetParsedTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => ({\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: result.account.data,\n        },\n      })),\n    };\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config: ?GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = GetLargestAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(({address, lamports}) => ({\n      address: new PublicKey(address),\n      lamports,\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = GetTokenLargestAccountsResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(pair => ({\n      ...pair,\n      address: new PublicKey(pair.address),\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetAccountInfoAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data} = res.result.value;\n      assert(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>,\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetParsedAccountInfoResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data: resultData} = res.result.value;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data,\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    return await this.getAccountInfoAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>> {\n    const args = this._buildArgs([programId.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      assert(result.account.data[1] === 'base64');\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: Buffer.from(result.account.data[0], 'base64'),\n        },\n      };\n    });\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey,\n      account: AccountInfo<Buffer | ParsedAccountData>,\n    }>,\n  > {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetParsedProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      const resultData = result.account.data;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data,\n        },\n      };\n    });\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   *\n   * If `confirmations` count is not specified, wait for transaction to be finalized.\n   *\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    confirmations: ?number,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const start = Date.now();\n    const WAIT_TIMEOUT_MS = 60 * 1000;\n\n    let statusResponse = await this.getSignatureStatus(signature);\n    for (;;) {\n      const status = statusResponse.value;\n      if (status) {\n        // 'status.confirmations === null' implies that the tx has been finalized\n        if (\n          status.err ||\n          status.confirmations === null ||\n          (typeof confirmations === 'number' &&\n            status.confirmations >= confirmations)\n        ) {\n          break;\n        }\n      } else if (Date.now() - start >= WAIT_TIMEOUT_MS) {\n        break;\n      }\n\n      // Sleep for approximately one slot\n      await sleep(MS_PER_SLOT);\n      statusResponse = await this.getSignatureStatus(signature);\n    }\n\n    return statusResponse;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment: ?Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = GetVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = GetSlot(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment: ?Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = GetSlotLeader(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(value.length === 1);\n    return {context, value: value[0]};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = GetSignatureStatusesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('faied to get total supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment: ?Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = GetInflationGovernorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetInflationGovernorResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment: ?Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = GetEpochInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochInfoResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = GetEpochScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochScheduleResult(res.result);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = GetLeaderScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = GetMinimumBalanceForRentExemptionRpcResult(unsafeRes);\n    if (res.error) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>,\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n\n    const res = GetRecentBlockhashAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = GetFeeCalculatorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value && value.feeCalculator,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment: ?Commitment,\n  ): Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}> {\n    return await this.getRecentBlockhashAndContext(commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error('failed to get recent blockhash: ' + e);\n      });\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = GetVersionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const {result, error} = GetConfirmedBlockRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed block: ' + result.error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return {\n      blockhash: new PublicKey(result.blockhash).toString(),\n      previousBlockhash: new PublicKey(result.previousBlockhash).toString(),\n      parentSlot: result.parentSlot,\n      transactions: result.transactions.map(result => {\n        const {message, signatures} = result.transaction;\n        return {\n          transaction: Transaction.populate(new Message(message), signatures),\n          meta: result.meta,\n        };\n      }),\n      rewards: result.rewards || [],\n    };\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n    ]);\n    const {result, error} = GetConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) {\n      return result;\n    }\n\n    const {message, signatures} = result.transaction;\n    return {\n      slot: result.slot,\n      transaction: Transaction.populate(new Message(message), signatures),\n      meta: result.meta,\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n      'jsonParsed',\n    ]);\n    const {result, error} = GetParsedConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) return result;\n\n    const {\n      accountKeys,\n      instructions,\n      recentBlockhash,\n    } = result.transaction.message;\n    return {\n      slot: result.slot,\n      meta: result.meta,\n      transaction: {\n        signatures: result.transaction.signatures,\n        message: {\n          accountKeys: accountKeys.map(accountKey => ({\n            pubkey: new PublicKey(accountKey.pubkey),\n            signer: accountKey.signer,\n            writable: accountKey.writable,\n          })),\n          instructions: instructions.map(ix => {\n            let mapped: any = {programId: new PublicKey(ix.programId)};\n            if ('accounts' in ix) {\n              mapped.accounts = ix.accounts.map(key => new PublicKey(key));\n            }\n\n            return {\n              ...ix,\n              ...mapped,\n            };\n          }),\n          recentBlockhash,\n        },\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress',\n      [address.toBase58(), startSlot, endSlot],\n    );\n    const result = GetConfirmedSignaturesForAddressRpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options: ?ConfirmedSignaturesForAddress2Options,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      [address.toBase58(), options],\n    );\n    const result = GetConfirmedSignaturesForAddress2RpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const expired =\n        Date.now() - this._blockhashInfo.lastFetch >=\n        BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('max');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: new Date(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Account>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = bs58.encode(wireTransaction);\n    const args = [encodedTransaction];\n\n    if (signers) {\n      args.push({sigVerify: true});\n    }\n\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = SimulatedTransactionResponseValidator(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Account>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * @private\n   */\n  async validatorExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('validatorExit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error('validator exit failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = bs58.encode(toBuffer(rawTransaction));\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base58 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const args = [encodedTransaction];\n    const skipPreflight = options && options.skipPreflight;\n    if (skipPreflight) args.push({skipPreflight});\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose() {\n    clearInterval(this._rpcWebSocketHeartbeat);\n    this._rpcWebSocketHeartbeat = null;\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  async _subscribe<SubInfo: {subscriptionId: ?SubscriptionId}, RpcArgs>(\n    sub: SubInfo,\n    rpcMethod: string,\n    rpcArgs: RpcArgs,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _unsubscribe<SubInfo: {subscriptionId: ?SubscriptionId}>(\n    sub: SubInfo,\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetSubscriptions() {\n    (Object.values(this._accountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._programAccountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._signatureSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._slotSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._rootSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @private\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0\n    ) {\n      this._rpcWebSocket.close();\n      return;\n    }\n\n    if (this._rpcWebSocketHeartbeat === null) {\n      this._resetSubscriptions();\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      this._subscribe(\n        sub,\n        'signatureSubscribe',\n        this._buildArgs([sub.signature], sub.commitment),\n      );\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error('account notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.data[1] === 'base64');\n        sub.callback(\n          {\n            executable: value.executable,\n            owner: new PublicKey(value.owner),\n            lamports: value.lamports,\n            data: Buffer.from(value.data[0], 'base64'),\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ProgramAccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(\n        'program account notification failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.account.data[1] === 'base64');\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: {\n              executable: value.account.executable,\n              owner: new PublicKey(value.account.owner),\n              lamports: value.account.lamports,\n              data: Buffer.from(value.account.data[0], 'base64'),\n            },\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = SlotNotificationResult(notification);\n    if (res.error) {\n      throw new Error('slot notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {parent, slot, root} = res.result;\n    const keys = Object.keys(this._slotSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._slotSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback({\n          parent,\n          slot,\n          root,\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override: ?Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = SignatureNotificationResult(notification);\n    if (res.error) {\n      throw new Error('signature notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._signatureSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._signatureSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        // Signatures subscriptions are auto-removed by the RPC service so\n        // no need to explicitly send an unsubscribe message\n        delete this._signatureSubscriptions[id];\n        this._updateSubscriptions();\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = RootNotificationResult(notification);\n    if (res.error) {\n      throw new Error('root notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const root = res.result;\n    const keys = Object.keys(this._rootSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._rootSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(root);\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {Account} from '../account';\nimport type {ConfirmOptions} from '../connection';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `confirmations` count is not specified, wait for transaction to be finalized.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const start = Date.now();\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    options,\n  );\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.confirmations,\n    )\n  ).value;\n\n  if (status) {\n    if (status.err) {\n      throw new Error(\n        `Transaction ${signature} failed (${JSON.stringify(status)})`,\n      );\n    }\n    return signature;\n  }\n\n  const duration = (Date.now() - start) / 1000;\n  throw new Error(\n    `Transaction was not confirmed in ${duration.toFixed(\n      2,\n    )} seconds (${JSON.stringify(status)})`,\n  );\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\nexport type InstructionType = {|\n  index: number,\n  layout: typeof BufferLayout,\n|};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n */\nexport function encodeData(type: InstructionType, fields: Object): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): Object {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer system transaction params\n * @typedef {Object} TransferParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type TransferParams = {|\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Assign system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} programId\n */\nexport type AssignParams = {|\n  accountPubkey: PublicKey,\n  programId: PublicKey,\n|};\n\n/**\n * Create account with seed system transaction params\n * @typedef {Object} CreateAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Create nonce account system transaction params\n * @typedef {Object} CreateNonceAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {number} lamports\n */\nexport type CreateNonceAccountParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Create nonce account with seed system transaction params\n * @typedef {Object} CreateNonceAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n */\nexport type CreateNonceAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n  basePubkey: PublicKey,\n  seed: string,\n|};\n\n/**\n * Initialize nonce account system instruction params\n * @typedef {Object} InitializeNonceParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type InitializeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Advance nonce account system instruction params\n * @typedef {Object} AdvanceNonceParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type AdvanceNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Withdraw nonce account system transaction params\n * @typedef {Object} WithdrawNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Authorize nonce account system transaction params\n * @typedef {Object} AuthorizeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n */\nexport type AuthorizeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n|};\n\n/**\n * Allocate account system transaction params\n * @typedef {Object} AllocateParams\n * @property {PublicKey} accountPubkey\n * @property {number} space\n */\nexport type AllocateParams = {|\n  accountPubkey: PublicKey,\n  space: number,\n|};\n\n/**\n * Allocate account with seed system transaction params\n * @typedef {Object} AllocateWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type AllocateWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Assign account with seed system transaction params\n * @typedef {Object} AssignWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type AssignWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (SYSTEM_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n * @typedef {'Create' | 'Assign' | 'Transfer' | 'CreateWithSeed'\n | 'AdvanceNonceAccount' | 'WithdrawNonceAccount' | 'InitializeNonceAccount'\n | 'AuthorizeNonceAccount'} SystemInstructionType\n */\nexport type SystemInstructionType = $Keys<typeof SYSTEM_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid system InstructionType's\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('11111111111111111111111111111111');\n  }\n\n  /**\n   * Generate a Transaction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that transfers lamports from one account to another\n   */\n  static transfer(params: TransferParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that assigns an account to a program\n   */\n  static assign(params: AssignParams | AssignWithSeedParams): Transaction {\n    let data;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {programId: params.programId.toBuffer()});\n    }\n\n    return new Transaction().add({\n      keys: [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: params.basePubkey.toBuffer(),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    let transaction;\n    if (params.basePubkey && params.seed) {\n      transaction = SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId,\n      });\n    } else {\n      transaction = SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId,\n      });\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.authorizedPubkey.toBuffer(),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.newAuthorizedPubkey.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): Transaction {\n    let data;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        space: params.space,\n        programId: params.programId.toBuffer(),\n      });\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n    }\n\n    return new Transaction().add({\n      keys: [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {NUM_TICKS_PER_SECOND} from './timing';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Math.ceil(dataLength / Loader.chunkSize);\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<void> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n      const transaction = SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: program.publicKey,\n        lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n        space: data.length,\n        programId,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          confirmations: 1,\n          skipPreflight: true,\n        },\n      );\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          confirmations: 1,\n          skipPreflight: true,\n        }),\n      );\n\n      // Delay ~1 tick between write transactions in an attempt to reduce AccountInUse errors\n      // since all the write transactions modify the same program account\n      await sleep(1000 / NUM_TICKS_PER_SECOND);\n\n      // Run up to 8 Loads in parallel to prevent too many parallel transactions from\n      // getting rejected with AccountInUse.\n      //\n      // TODO: 8 was selected empirically and should probably be revisited\n      if (transactions.length === 8) {\n        await Promise.all(transactions);\n        transactions = [];\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          confirmations: 1,\n          skipPreflight: true,\n        },\n      );\n    }\n  }\n}\n","// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<void> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\nexport class Authorized {\n  staker: PublicKey;\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\nexport class Lockup {\n  unixTimestamp: number;\n  epoch: number;\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n}\n\n/**\n * Create stake account transaction params\n * @typedef {Object} CreateStakeAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Create stake account with seed transaction params\n * @typedef {Object} CreateStakeAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Initialize stake instruction params\n * @typedef {Object} InitializeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n */\nexport type InitializeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n|};\n\n/**\n * Delegate stake instruction params\n * @typedef {Object} DelegateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} votePubkey\n */\nexport type DelegateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  votePubkey: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params\n * @typedef {Object} AuthorizeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n */\nexport type AuthorizeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n|};\n\n/**\n * Authorize stake instruction params using a derived key\n * @typedef {Object} AuthorizeWithSeedStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorityBase\n * @property {string} authoritySeed\n * @property {PublicKey} authorityOwner\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n */\nexport type AuthorizeWithSeedStakeParams = {|\n  stakePubkey: PublicKey,\n  authorityBase: PublicKey,\n  authoritySeed: string,\n  authorityOwner: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n|};\n\n/**\n * Split stake instruction params\n * @typedef {Object} SplitStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} splitStakePubkey\n * @property {number} lamports\n */\nexport type SplitStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  splitStakePubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Withdraw stake instruction params\n * @typedef {Object} WithdrawStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Deactivate stake instruction params\n * @typedef {Object} DeactivateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type DeactivateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (STAKE_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n * @typedef { 'Initialize' | 'Authorize' | 'AuthorizeWithSeed' | 'Delegate' | 'Split' | 'Withdraw'\n | 'Deactivate' } StakeInstructionType\n */\nexport type StakeInstructionType = $Keys<typeof STAKE_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid stake InstructionType's\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\nexport type StakeAuthorizationType = {|\n  index: number,\n|};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * Public key that identifies the Stake program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Stake11111111111111111111111111111111111111');\n  }\n\n  /**\n   * Max space of a Stake account\n   */\n  static get space(): number {\n    return 4008;\n  }\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: authorized.staker.toBuffer(),\n        withdrawer: authorized.withdrawer.toBuffer(),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: lockup.custodian.toBuffer(),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    let transaction = SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId,\n    });\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    let transaction = SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId,\n    });\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorityBase, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    let transaction = SystemProgram.createAccount({\n      fromPubkey: authorizedPubkey,\n      newAccountPubkey: splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId,\n    });\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: toPubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {struct} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @private\n */\ntype ConfigKey = {|\n  publicKey: PublicKey,\n  isSigner: boolean,\n|};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {|\n  name: string,\n  website?: string,\n  details?: string,\n  keybaseUsername?: string,\n|};\n\nconst InfoString = struct({\n  name: 'string',\n  website: 'string?',\n  details: 'string?',\n  keybaseUsername: 'string?',\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = InfoString(JSON.parse(rawInfo));\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {|\n  slot: number,\n  confirmationCount: number,\n|};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {|\n  epoch: number,\n  credits: number,\n  prevCredits: number,\n|};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    va.nodePubkey = new PublicKey(va.nodePubkey);\n    va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n    va.authorizedWithdrawerPubkey = new PublicKey(\n      va.authorizedWithdrawerPubkey,\n    );\n    if (!va.rootSlotValid) {\n      va.rootSlot = null;\n    }\n    return va;\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `confirmations` count is not specified, wait for transaction to be finalized.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const start = Date.now();\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    options,\n  );\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.confirmations,\n    )\n  ).value;\n\n  if (status) {\n    if (status.err) {\n      throw new Error(\n        `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n      );\n    }\n    return signature;\n  }\n\n  const duration = (Date.now() - start) / 1000;\n  throw new Error(\n    `Raw transaction '${signature}' was not confirmed in ${duration.toFixed(\n      2,\n    )} seconds`,\n  );\n}\n","//@flow\n\n/**\n * @private\n */\nconst endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","// @flow\nexport {Account} from './account';\nexport {BPF_LOADER_DEPRECATED_PROGRAM_ID} from './bpf-loader-deprecated';\nexport {BpfLoader, BPF_LOADER_PROGRAM_ID} from './bpf-loader';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {Message} from './message';\nexport {NonceAccount, NONCE_ACCOUNT_LENGTH} from './nonce-account';\nexport {PublicKey} from './publickey';\nexport {\n  STAKE_CONFIG_ID,\n  Authorized,\n  Lockup,\n  StakeAuthorizationLayout,\n  StakeInstruction,\n  STAKE_INSTRUCTION_LAYOUTS,\n  StakeProgram,\n} from './stake-program';\nexport {\n  SystemInstruction,\n  SystemProgram,\n  SYSTEM_INSTRUCTION_LAYOUTS,\n} from './system-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {VALIDATOR_INFO_KEY, ValidatorInfo} from './validator-info';\nexport {VOTE_PROGRAM_ID, VoteAccount} from './vote-account';\nexport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nexport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nexport {sendAndConfirmRawTransaction} from './util/send-and-confirm-raw-transaction';\nexport {clusterApiUrl} from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","from","buffer","byteOffset","byteLength","naclLowLevel","nacl","lowlevel","PublicKey","value","decoded","bs58","decode","length","Error","_bn","BN","publicKey","eq","encode","b","toArrayLike","zeroPad","alloc","copy","toBase58","fromPublicKey","seed","programId","concat","sha256","hash","seeds","forEach","publicKeyBytes","toArray","is_on_curve","nonce","seedsWithNonce","createProgramAddress","address","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","property","BufferLayout","rustString","rsl","_decode","bind","_encode","offset","data","chars","toString","str","span","authorized","lockup","getAlloc","type","fields","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","map","account","recentBlockhash","instructions","index","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","numKeys","keyCount","shortvec","instruction","accounts","programIdIndex","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","slice","signDataLayout","Layout","transaction","keys","key","signData","byteArray","accountCount","i","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Object","assign","Transaction","signatures","signature","items","nonceInfo","nonceInstruction","unshift","programIds","accountMetas","accountMeta","includes","pubkey","isSigner","isWritable","sort","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sigPubkeyString","signedKeys","unsignedKeys","first","indexOf","keyObj","invariant","keyIndex","compileMessage","serialize","signPartial","partialSigners","partialSignerPublicKey","accountOrPublicKey","signerAccount","serializeMessage","detached","signer","addSignature","sigpair","equals","_verifySignatures","verified","verify","_serialize","signatureCount","transactionLength","wireTransaction","populate","message","sigPubkeyPair","some","isAccountWritable","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","nonceAccount","authorizedPubkey","sleep","ms","Promise","resolve","setTimeout","BLOCKHASH_CACHE_TIMEOUT_MS","jsonRpcResultAndContext","resultDescription","jsonRpcResult","context","struct","slot","jsonRpcVersion","literal","union","jsonrpc","id","error","result","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","epoch","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","err","Version","SimulatedTransactionResponseValidator","pick","logs","array","createRpcRequest","url","server","jayson","request","callback","options","method","body","headers","too_many_requests_retries","res","waitTime","fetch","status","console","log","statusText","text","ok","reject","response","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","GetBalanceAndContextRpcResult","GetBlockTimeRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","object","amount","uiAmount","decimals","GetTokenLargestAccountsResult","GetTokenAccountBalance","GetTokenSupplyRpcResult","GetTokenAccountsByOwner","executable","owner","lamports","rentEpoch","GetParsedTokenAccountsByOwner","program","parsed","space","GetLargestAccountsRpcResult","GetVersionRpcResult","AccountInfoResult","ParsedAccountInfoResult","GetAccountInfoAndContextRpcResult","GetParsedAccountInfoResult","GetConfirmedSignaturesForAddressRpcResult","GetConfirmedSignaturesForAddress2RpcResult","memo","AccountNotificationResult","subscription","ProgramAccountInfoResult","ParsedProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SignatureNotificationResult","RootNotificationResult","GetProgramAccountsRpcResult","GetParsedProgramAccountsRpcResult","GetSlot","GetSlotLeader","GetClusterNodes","gossip","tpu","rpc","version","GetVoteAccounts","current","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","tuple","commission","lastVote","rootSlot","delinquent","GetSignatureStatusesRpcResult","confirmations","GetTransactionCountRpcResult","GetTotalSupplyRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedConfirmedTransactionResult","writable","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","transactions","meta","rewards","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","feeCalculator","lamportsPerSignature","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","Connection","endpoint","commitment","urlParse","_rpcRequest","href","_commitment","_blockhashInfo","lastFetch","Date","transactionSignatures","simulatedSignatures","protocol","host","port","String","Number","_rpcWebSocket","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSignatureNotification","_wsOnRootNotification","_buildArgs","unsafeRes","assert","getBalanceAndContext","then","e","tokenMintAddress","tokenAddress","ownerAddress","filter","_args","mint","config","arg","mintAddress","pair","resultData","getAccountInfoAndContext","start","now","WAIT_TIMEOUT_MS","getSignatureStatus","statusResponse","getSignatureStatuses","params","warn","getRecentBlockhashAndContext","accountKey","ix","mapped","startSlot","endSlot","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","_pollingBlockhash","expired","_pollNewBlockhash","startTime","getRecentBlockhash","signers","_disableBlockhashCaching","_recentBlockhash","encodedTransaction","sigVerify","sendRawTransaction","rawTransaction","sendEncodedTransaction","skipPreflight","_rpcWebSocketHeartbeat","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","sub","rpcMethod","rpcArgs","subscriptionId","call","unsubscribeId","values","_accountChangeSubscriptions","s","_programAccountChangeSubscriptions","_signatureSubscriptions","_slotSubscriptions","_rootSubscriptions","programKeys","slotKeys","signatureKeys","rootKeys","close","connect","_subscribe","notification","_accountChangeSubscriptionCounter","subInfo","_unsubscribe","accountId","_programAccountChangeSubscriptionCounter","_slotSubscriptionCounter","override","encoding","_signatureSubscriptionCounter","_rootSubscriptionCounter","sendAndConfirmTransaction","connection","sendTransaction","confirmTransaction","JSON","stringify","duration","toFixed","encodeData","allocLength","layoutFields","decodeData","SystemInstruction","checkProgramId","instructionTypeLayout","typeIndex","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","Allocate","accountPubkey","AllocateWithSeed","base","basePubkey","Assign","AssignWithSeed","CreateWithSeed","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","add","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","Loader","Math","ceil","chunkSize","payer","getMinimumBalanceForRentExemption","balanceNeeded","dataLayout","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","Initialize","stakePubkey","Delegate","Authorize","newAuthorized","stakeAuthorizationType","AuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","Split","splitStakePubkey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","info","configKeyCount","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","va","authorizedVoterPubkey","authorizedWithdrawerPubkey","rootSlotValid","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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"}